/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  EventCreate,
  EventPublic,
  HTTPValidationError,
  ReadEventsEventsGetParams,
  ReadUsersUsersGetParams,
  User
} from '.././schemas';





/**
 * @summary Read Events
 */
export const readEventsEventsGet = (
    params?: ReadEventsEventsGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EventPublic[]>> => {
    
    
    return axios.get(
      `/events`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getReadEventsEventsGetQueryKey = (params?: ReadEventsEventsGetParams,) => {
    return [`/events`, ...(params ? [params]: [])] as const;
    }

    
export const getReadEventsEventsGetQueryOptions = <TData = Awaited<ReturnType<typeof readEventsEventsGet>>, TError = AxiosError<HTTPValidationError>>(params?: ReadEventsEventsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventsEventsGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadEventsEventsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readEventsEventsGet>>> = ({ signal }) => readEventsEventsGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readEventsEventsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadEventsEventsGetQueryResult = NonNullable<Awaited<ReturnType<typeof readEventsEventsGet>>>
export type ReadEventsEventsGetQueryError = AxiosError<HTTPValidationError>


export function useReadEventsEventsGet<TData = Awaited<ReturnType<typeof readEventsEventsGet>>, TError = AxiosError<HTTPValidationError>>(
 params: undefined |  ReadEventsEventsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventsEventsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readEventsEventsGet>>,
          TError,
          Awaited<ReturnType<typeof readEventsEventsGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadEventsEventsGet<TData = Awaited<ReturnType<typeof readEventsEventsGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: ReadEventsEventsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventsEventsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readEventsEventsGet>>,
          TError,
          Awaited<ReturnType<typeof readEventsEventsGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadEventsEventsGet<TData = Awaited<ReturnType<typeof readEventsEventsGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: ReadEventsEventsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventsEventsGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Events
 */

export function useReadEventsEventsGet<TData = Awaited<ReturnType<typeof readEventsEventsGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: ReadEventsEventsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventsEventsGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadEventsEventsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Read Event
 */
export const readEventEventsEventIdGet = (
    eventId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EventPublic>> => {
    
    
    return axios.get(
      `/events/${eventId}`,options
    );
  }


export const getReadEventEventsEventIdGetQueryKey = (eventId: number,) => {
    return [`/events/${eventId}`] as const;
    }

    
export const getReadEventEventsEventIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readEventEventsEventIdGet>>, TError = AxiosError<HTTPValidationError>>(eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventEventsEventIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadEventEventsEventIdGetQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readEventEventsEventIdGet>>> = ({ signal }) => readEventEventsEventIdGet(eventId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readEventEventsEventIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadEventEventsEventIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readEventEventsEventIdGet>>>
export type ReadEventEventsEventIdGetQueryError = AxiosError<HTTPValidationError>


export function useReadEventEventsEventIdGet<TData = Awaited<ReturnType<typeof readEventEventsEventIdGet>>, TError = AxiosError<HTTPValidationError>>(
 eventId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventEventsEventIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readEventEventsEventIdGet>>,
          TError,
          Awaited<ReturnType<typeof readEventEventsEventIdGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadEventEventsEventIdGet<TData = Awaited<ReturnType<typeof readEventEventsEventIdGet>>, TError = AxiosError<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventEventsEventIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readEventEventsEventIdGet>>,
          TError,
          Awaited<ReturnType<typeof readEventEventsEventIdGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadEventEventsEventIdGet<TData = Awaited<ReturnType<typeof readEventEventsEventIdGet>>, TError = AxiosError<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventEventsEventIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Event
 */

export function useReadEventEventsEventIdGet<TData = Awaited<ReturnType<typeof readEventEventsEventIdGet>>, TError = AxiosError<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readEventEventsEventIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadEventEventsEventIdGetQueryOptions(eventId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Event
 */
export const createEventEventsPost = (
    eventCreate: EventCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EventPublic>> => {
    
    
    return axios.post(
      `/events/`,
      eventCreate,options
    );
  }



export const getCreateEventEventsPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEventEventsPost>>, TError,{data: EventCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createEventEventsPost>>, TError,{data: EventCreate}, TContext> => {

const mutationKey = ['createEventEventsPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createEventEventsPost>>, {data: EventCreate}> = (props) => {
          const {data} = props ?? {};

          return  createEventEventsPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateEventEventsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createEventEventsPost>>>
    export type CreateEventEventsPostMutationBody = EventCreate
    export type CreateEventEventsPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create Event
 */
export const useCreateEventEventsPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEventEventsPost>>, TError,{data: EventCreate}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createEventEventsPost>>,
        TError,
        {data: EventCreate},
        TContext
      > => {

      const mutationOptions = getCreateEventEventsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Read Users
 */
export const readUsersUsersGet = (
    params?: ReadUsersUsersGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User[]>> => {
    
    
    return axios.get(
      `/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getReadUsersUsersGetQueryKey = (params?: ReadUsersUsersGetParams,) => {
    return [`/users`, ...(params ? [params]: [])] as const;
    }

    
export const getReadUsersUsersGetQueryOptions = <TData = Awaited<ReturnType<typeof readUsersUsersGet>>, TError = AxiosError<HTTPValidationError>>(params?: ReadUsersUsersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadUsersUsersGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readUsersUsersGet>>> = ({ signal }) => readUsersUsersGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadUsersUsersGetQueryResult = NonNullable<Awaited<ReturnType<typeof readUsersUsersGet>>>
export type ReadUsersUsersGetQueryError = AxiosError<HTTPValidationError>


export function useReadUsersUsersGet<TData = Awaited<ReturnType<typeof readUsersUsersGet>>, TError = AxiosError<HTTPValidationError>>(
 params: undefined |  ReadUsersUsersGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUsersUsersGet>>,
          TError,
          Awaited<ReturnType<typeof readUsersUsersGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadUsersUsersGet<TData = Awaited<ReturnType<typeof readUsersUsersGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: ReadUsersUsersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUsersUsersGet>>,
          TError,
          Awaited<ReturnType<typeof readUsersUsersGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadUsersUsersGet<TData = Awaited<ReturnType<typeof readUsersUsersGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: ReadUsersUsersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Users
 */

export function useReadUsersUsersGet<TData = Awaited<ReturnType<typeof readUsersUsersGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: ReadUsersUsersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUsersUsersGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadUsersUsersGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Read User
 */
export const readUserUsersUserIdGet = (
    userId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    
    return axios.get(
      `/users/${userId}`,options
    );
  }


export const getReadUserUsersUserIdGetQueryKey = (userId: number,) => {
    return [`/users/${userId}`] as const;
    }

    
export const getReadUserUsersUserIdGetQueryOptions = <TData = Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError = AxiosError<HTTPValidationError>>(userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadUserUsersUserIdGetQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readUserUsersUserIdGet>>> = ({ signal }) => readUserUsersUserIdGet(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadUserUsersUserIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readUserUsersUserIdGet>>>
export type ReadUserUsersUserIdGetQueryError = AxiosError<HTTPValidationError>


export function useReadUserUsersUserIdGet<TData = Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError = AxiosError<HTTPValidationError>>(
 userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof readUserUsersUserIdGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadUserUsersUserIdGet<TData = Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError = AxiosError<HTTPValidationError>>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readUserUsersUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof readUserUsersUserIdGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadUserUsersUserIdGet<TData = Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError = AxiosError<HTTPValidationError>>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read User
 */

export function useReadUserUsersUserIdGet<TData = Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError = AxiosError<HTTPValidationError>>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readUserUsersUserIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadUserUsersUserIdGetQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create User
 */
export const createUserUsersPost = (
    user: User, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    
    return axios.post(
      `/users/`,
      user,options
    );
  }



export const getCreateUserUsersPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserUsersPost>>, TError,{data: User}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createUserUsersPost>>, TError,{data: User}, TContext> => {

const mutationKey = ['createUserUsersPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUserUsersPost>>, {data: User}> = (props) => {
          const {data} = props ?? {};

          return  createUserUsersPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserUsersPostMutationResult = NonNullable<Awaited<ReturnType<typeof createUserUsersPost>>>
    export type CreateUserUsersPostMutationBody = User
    export type CreateUserUsersPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create User
 */
export const useCreateUserUsersPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserUsersPost>>, TError,{data: User}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createUserUsersPost>>,
        TError,
        {data: User},
        TContext
      > => {

      const mutationOptions = getCreateUserUsersPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    